###############################################################################
# Pipeline for analysis of EMSeq data
# Date: 10/04/20 (The COVID-19 pandemy historycal period!)
# Author: Sara Formichetti
# email: sara.formichetti@embl.it
# run: all specified in shell wrapper for the specific experiment's analysis
###############################################################################

#####################
# Imports
#####################

import pandas
import os
import yaml

#####################
# Defining shell to use
#####################

shell.executable("/bin/bash")

#####################
# Create some dirs if they do not exist
#####################
if not os.path.isdir('./annotations'):
    shell("mkdir annotations/")

#####################
# Functions
#####################

def read_samplesTable(samplesTable):
    samplesData = pandas.read_csv(samplesTable)
    # Verify column names
    if not {'SRR','sample','condition', 'group_or_time_point', 'biol_rep','tech_rep','run','library_layout','read_length'}.issubset(samplesData.columns.values):
	    raise KeyError("The samples file must contain the following named columns (name of the column[content format]): SRR[SRR ID i.e. string],sample[string with no spaces],condition[string with no spaces],group_or_time_point[string with no spaces],biol_rep[number],tech_rep[number],run[number],library_layout[SINGLE - |PAIRED - ],read_length[number]; please add this column and just write always 'none'(without quotes) under 'SRR' if they do not come from SRA and always '1'(without quotes) under 'condition/group_or_time_point/biol_rep/tech_rep' if there is no more than one group.")
    return samplesData

######################
# Config Variables
######################

# Checking that provided configfile contains all necessary parameters 

with open('config/config.yaml') as f:
    my_config_dict = yaml.safe_load(f)

target_config_keys = ['experiment_folder', 'input_samples_table', 'fastq_input_dir', 'seq_output_dir', 'genome_dir', 'genome_fa', 'chr_sizes', 'maj_chr_bed', 'gene_annotation_bed', 'CGI_annotation_bed', 'TE_annotation_bed', 'analysis_output_dir', 'tmp_dir', 'envs_folder', 'containers_folder']
missing_params = [ele for ele in target_config_keys if ele not in list(my_config_dict)] 
if len(missing_params) == 0:
    print("Configfile contains all necessary variables")
else :
    print("Configfile misses following parameters: ", str(missing_params))
    sys.exit()

# Getting value of variable containing samples' table file name

try:
  input_samples_table = config["input_samples_table"]
except KeyError:
    print("The parameter \"input_samples_table\" has not been defined in the configfile. The pipeline cannot start.")
    
#################################
# Reading input samples' table
#################################

inputSamplesData = read_samplesTable(input_samples_table)

########################
# Variables definition
########################

# Splitting the table into single or paired end experiments

index_single = inputSamplesData['library_layout'] == 'SINGLE - '
index_paired = inputSamplesData['library_layout'] == 'PAIRED - '
samplesData_single = inputSamplesData[index_single]
samplesData_paired = inputSamplesData[index_paired]

# Output files names

SINGLESAMPLES = samplesData_single['sample'].tolist()
PAIREDSAMPLES = samplesData_paired['sample'].tolist()

###############################################################################
# Rules
###############################################################################

######################
# Rule all
######################

rule all:
  input:
    expand("{path}qc/{sample}_fastqc.{ext}", path=config["seq_output_dir"], sample=SINGLESAMPLES, ext=["html", "zip"]),
    expand("{path}bismark_final_report/{sample}_trimmed_bismark_bt2_SE_report.html", path=config["seq_output_dir"], sample=SINGLESAMPLES),
    expand("{main_path}{sub_path}R/dmt_50_geno_for_each_tp.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"]),
    expand("{main_path}{sub_path}R/mrl_tiles_50.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"]),
    "data/annotations/TSS_900bp_uniq.bed",
    expand("{main_path}{sub_path}R/dm_prom_tp_for_each_geno_0vs14d.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"]),
    expand("{main_path}{sub_path}R/dm_CGI_tp_for_each_geno_0vs7d.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"]),
    "data/annotations/rmsk_filtered.bed",
    expand("{main_path}{sub_path}R/mrl_TE.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"])

rule fastqc_my_fastq:
  input:
    expand("{path}{{sample}}.fastq.gz", path=config["fastq_input_dir"])
  params:
    output_dir=expand("{path}qc/", path=config["seq_output_dir"])
  output:
    expand("{path}qc/{{sample}}_fastqc.{ext}", path=config["seq_output_dir"], ext=["html", "zip"])
  threads: 6
  conda: config["envs_folder"] + "EMSeq.yml" 
  shell:
    "fastqc -t 6 -o {params.output_dir} {input}"

rule trimgalore_my_fastq:
  input:
    expand("{path}{{sample}}.fastq.gz", path=config["fastq_input_dir"])
  output:
    trimmed_fq=expand("{path}trimming/{{sample}}_trimmed.fq.gz", path=config["seq_output_dir"]),
    trimmed_qc=expand("{path}trimming/{{sample}}_trimmed_fastqc.{ext}", path=config["seq_output_dir"], ext=["html", "zip"])
  params:
    output_dir=expand("{path}trimming/", path=config["seq_output_dir"]),
  threads: 6
  conda: config["envs_folder"] + "EMSeq.yml"
  shell: 
    "trim_galore -j 6 -q 20 --stringency 1 -e 0.1 --length 20 --fastqc -o {params.output_dir} {input}" # trimgalore default parameters
 
rule align:
  input:
    rules.trimgalore_my_fastq.output.trimmed_fq
  output:
    bam=expand("{main_path}{sub_path}alignment/{{sample}}_trimmed_bismark_bt2.bam", main_path=config["experiment_folder"], sub_path=config["seq_output_dir"]),
    report=expand("{path}alignment/{{sample}}_trimmed_bismark_bt2_SE_report.txt", path=config["seq_output_dir"])
  params:
    genome_folder=config["genome_dir"],
    output_dir=expand("{path}alignment/", path=config["seq_output_dir"]),
    temp_dir=config["tmp_dir"]
  threads: 4
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    "bismark -o {params.output_dir} -p {threads} --temp_dir {params.temp_dir} --genome {params.genome_folder} {input}"

rule deduplicate:
  input:
    rules.align.output.bam
  output:
    bam=expand("{main_path}{sub_path}alignment/{{sample}}_trimmed_bismark_bt2.deduplicated.bam", main_path=config["experiment_folder"], sub_path=config["seq_output_dir"]),
    report=expand("{main_path}{sub_path}alignment/{{sample}}_trimmed_bismark_bt2.deduplication_report.txt", main_path=config["experiment_folder"], sub_path=config["seq_output_dir"])
  params:
    alignment_dir=expand("{path}alignment/", path=config["seq_output_dir"]),
    main_dir=expand("{path}", path=config["experiment_folder"])
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    "cd {params.alignment_dir} && deduplicate_bismark --bam {input} && cd {params.main_dir}" # this all mess of changing directories is necessary because you cannot specify output directory in bismark deduplicate command....

rule meth_extractor:
  input:
    rules.deduplicate.output.bam
  output:
    meth_txt=expand("{path}meth_call/CpG_OT_{{sample}}_trimmed_bismark_bt2.deduplicated.txt.gz", path=config["seq_output_dir"]), #same for the other C contexts and for OB strand
    #other files that will be generated by this rule:
    #meth_bg= #only for CpG context
    #meth_cov= #only for CpG context
    #cytosine_report= #only for CpG context
    Mbias=expand("{path}meth_call/{{sample}}_trimmed_bismark_bt2.deduplicated.M-bias.txt", path=config["seq_output_dir"]),
    splitting_report=expand("{path}meth_call/{{sample}}_trimmed_bismark_bt2.deduplicated_splitting_report.txt", path=config["seq_output_dir"])
  params:
    genome_folder=expand("{main_path}{sub_path}", main_path=config["experiment_folder"], sub_path=config["genome_dir"]),
    output_dir=expand("{path}meth_call/", path=config["seq_output_dir"])
  threads: 4
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    "bismark_methylation_extractor --multicore 4 --report --cytosine_report --ignore 9 --ignore_3prime 9 --gzip --bedGraph -o {params.output_dir} --genome {params.genome_folder} {input}"

rule bismark_report:
  input:
    align_report=rules.align.output.report,
    dedupl_report=rules.deduplicate.output.report,
    mbias_report=rules.meth_extractor.output.Mbias,
    splitting_report=rules.meth_extractor.output.splitting_report
  output:
    expand("{path}bismark_final_report/{{sample}}_trimmed_bismark_bt2_SE_report.html", path=config["seq_output_dir"])
  params:
    output_dir=expand("{path}bismark_final_report/", path=config["seq_output_dir"])
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    "bismark2report --dir {params.output_dir} --alignment_report {input.align_report} --dedup_report {input.dedupl_report} --splitting_report {input.splitting_report} --mbias_report {input.mbias_report} --nucleotide_report 'none'"

rule count_in_tiles:
  input:
    expand("{main_path}{sub_path}meth_call", main_path = config["experiment_folder"], sub_path = config["seq_output_dir"])
  output:
    expand("{main_path}{sub_path}R/dmt_50_geno_for_each_tp.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"])
  threads: 5
  singularity:
    config["containers_folder"] + "R_for_methyl_analysis.sif"   
  script:
    config["experiment_folder"] + config["script_dir"] + "R/CpG_tiles_counts.R" 

rule make_promoter_annotation:
  input:
    gene_annotation=config["gene_annotation_bed"],
    CGI_annotation=config["CGI_annotation_bed"]
  output:
    uniq_promoters_bed="data/annotations/TSS_900bp_uniq.bed",
    nonPromoter_CGI_bed="data/annotations/UCSC_CGI_nonPromoters.bed"
  params:
    chr_sizes=config["chr_sizes"],
    genome_fa=config["genome_fa"]
  threads: 3
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    "{config[script_dir]}sh/TSSs_CpG.sh {input.gene_annotation} {params.chr_sizes} {params.genome_fa} {input.CGI_annotation}"

rule count_on_promoters:
  input:
    meth_cov_dir=expand("{main_path}{sub_path}meth_call", main_path = config["experiment_folder"], sub_path = config["seq_output_dir"]),
    promoters_bed=rules.make_promoter_annotation.output.uniq_promoters_bed
  output:
    expand("{main_path}{sub_path}R/dm_prom_tp_for_each_geno_0vs14d.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"])
  threads: 5
  singularity:
    config["containers_folder"] + "R_for_methyl_analysis.sif"   
  script:
    config["experiment_folder"] + config["script_dir"] + "R/promoter_counts.R" 

rule count_on_nonPromoter_CGI:
  input:
    meth_cov_dir=expand("{main_path}{sub_path}meth_call", main_path = config["experiment_folder"], sub_path = config["seq_output_dir"]),
    nonPromoter_CGI_bed=rules.make_promoter_annotation.output.nonPromoter_CGI_bed
  output:
    expand("{main_path}{sub_path}R/dm_CGI_tp_for_each_geno_0vs7d.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"])
  threads: 5
  singularity:
    config["containers_folder"] + "R_for_methyl_analysis.sif"   
  script:
    config["experiment_folder"] + config["script_dir"] + "R/nonPromoter_CGI_counts.R" 

rule filter_TE_annotation:
  input:
    TE_annotation=config["TE_annotation_bed"],
    gene_annotation=config["gene_annotation_bed"]
  output:
    config["TE_annotation_bed"].replace(".bed", ".noGenes.noSimple.bed")
  params:
    maj_chr_bed=config["maj_chr_bed"]
  threads: 4
  conda: config["envs_folder"] + "EMSeq.yml"
  shell:
    """
    bedtools intersect -a {input.TE_annotation} -b {params.maj_chr_bed} -u | bedtools intersect -a stdin -b {input.gene_annotation} -v | grep -E -w -v "Low_complexity|Simple_repeat" > {output}
    """

rule count_on_TE:
  input:
    meth_cov_dir=expand("{main_path}{sub_path}meth_call", main_path = config["experiment_folder"], sub_path = config["seq_output_dir"]),
    TE_annotation=rules.filter_TE_annotation.output
  output:
    expand("{main_path}{sub_path}R/mrl_TE.Rdata", main_path = config["experiment_folder"], sub_path = config["script_dir"])
  threads: 5
  singularity:
    config["containers_folder"] + "R_for_methyl_analysis.sif"   
  script:
    config["experiment_folder"] + config["script_dir"] + "R/TE_counts.R" 

onsuccess:
  if os.path.isdir('./tmp'):
    shell("rm -r tmp/")
    print("Workflow finished, no error")
  else:
    print("Workflow finished, no error")
  filename_re = 'fastqc'
  for filename in os.listdir(config["seq_output_dir"] + "trimming/"):
    if filename_re in filename:
      print("Moving trimmed fastqc files to qc directory since the latter is excluded from .gitignore (differently from the rest of 'data' subdirectories)")
      shell("mv {config[seq_output_dir]}trimming/*fastqc* {config[seq_output_dir]}qc/ && echo done")
  
